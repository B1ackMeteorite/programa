//arquivo.c declaraçao do tipo de dados e implementaçao das suas funçoes.
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "Ponto.h"

//definiçao do tipo de dados
struct ponto{
    float x;
    float y;
};

Ponto* pto_cria(float x,float y){
    Ponto* p = (Ponto*)malloc(sizeof(Ponto));
    if(p!=NULL){
        p->x = x;
        p->y = y;   
    }
    return p;
}
void pto_free(Ponto* p){
    free(p);    
}
void pto_acessa(Ponto* p, float* x, float* y){
    *x = p->x;
    *y = p->y;
}

void pto_atribui(Ponto* p, float x, float y){
    p->x = x;
    p->y = y;
}

float pto_distancia(Ponto* p1, Ponto* p2){
    float dx = p1->x - p2->x;
    float dy = p1->y - p2->y;
    return sqrt(dx*dx + dy*dy);
}
// Path: main.c
//arquivo.c programa principal

int main(){
    Ponto* p1 = pto_cria(10,21);
    Ponto* p2 = pto_cria(7,25);
    float d = pto_distancia(p1,p2);
    printf("Distancia entre pontos: %f\n",d);
    pto_free(p1);
    pto_free(p2);
    return 0;
}
//arquivo.h protótipos da funçoes, tipos de ponteiro, e dados globalmente acessiveis.

typedef struct ponto Ponto;

Ponto* pto_cria(float x, float y);
void pto_libera(Ponto* p);
void pto_acessa(Ponto* p, float* x, float* y);
void pto_atribui(Ponto* p, float x, float y);
float pto_distancia(Ponto* p1, Ponto* p2);


